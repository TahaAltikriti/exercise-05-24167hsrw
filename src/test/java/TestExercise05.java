/**
 * DO NOT EDIT THIS FILE UNLESS FOR YOUR LOCAL TEST PURPOSE
 * author: Ronny Hartanto (2020)
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

import org.junit.jupiter.api.Test;

import java.io.*;
import java.util.GregorianCalendar;

public class TestExercise05 {

  @Test
  public void test01()
  {
    PrintStream originalOut = System.out;
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    System.setOut(new PrintStream(bos));
    Professor prof1  = new Professor("xyq", "X", "Yq");
    Course oop = new Course("EL-2309", "Object Oriented Programming", prof1, 5);
    assertEquals("EL-2309", oop.getID());
    assertEquals(5, oop.getCredit());
    System.setOut(originalOut);
  }
   @Test
   public void test02()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     GregorianCalendar date = new GregorianCalendar(1990, 01, 01);
     Student student1 = new Student("A", "B");
     student1.setStudyCourse(StudyCourse.ME);
     assertEquals(student1.getStudyCourse(), StudyCourse.ME);
     Student student2 = new Student("C", "D");
     assertEquals(student2.getID(), "10001");
     student2.setStudyCourse("EL");
     assertEquals(student2.getStudyCourse(), StudyCourse.EL);
     Student student3 = new Student("E", "F", date.getTime());
     Student student4 = new Student("G", "H", date.getTime());
     assertEquals(student4.getID(), "10003");
     User user = student4;
     assertEquals(user.getFQUN(), "10003@student.hsrw");
     assertEquals(((User) student3).getBirthDate(), date.getTime());
     student4.setStudyCourse("MME");
     assertEquals("Mechanical Engineering, M.Sc.", student4.getStudyCourseDescription());
     Professor prof1 = new Professor("xye", "X", "Ye");
     Professor prof2 = new Professor("abc", "A", "Bc", date.getTime());
     assertEquals(prof1.getFaculty(), Faculty.TUB);
     assertEquals(prof1.getFQUN(), "xye@staff.hsrw");
     prof2.setFaculty(Faculty.KU);
     prof2.setPhone(555);
     assertEquals(prof2.getFaculty(), Faculty.KU);
     assertEquals(prof2.getPhone(), "+49 2842 908 555");
     user = prof2;
     assertEquals(user.getFQUN(), "abc@staff.hsrw");
     Course oop = new Course("EL-2309", "Object Oriented Programming", prof1, 5);
     Classroom oop_class = new Classroom(oop, "Webex");
     assertEquals("WS2020/21", oop_class.getTerm());
     assertEquals("EL-2309-WS2020/21", oop_class.getID());
     oop_class.addStudent(student1);
     oop_class.addStudent(student2);
     oop_class.addStudent(student3);
     oop_class.addStudent(student4);
     assertEquals("10000@student.hsrw, 10001@student.hsrw, 10002@student.hsrw, 10003@student.hsrw", oop_class.getParticipantsEmail());  
     assertEquals(4, oop_class.getTotalParticipants());
     System.setOut(originalOut);
   }
   @Test
   public void test03()
   {
     PrintStream originalOut = System.out;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
     System.setOut(new PrintStream(bos));
     Triangle tri1 = new Triangle(5, 5, 5);
     Triangle tri2 = new Triangle(3, 5, 4);
     GeometricObject geo = tri2;
     assertEquals("white", tri2.getColor());
     tri2.setColor("blue");
     assertEquals(3.0, tri2.getSide1());
     assertEquals(4, tri2.getSide3());
     assertEquals(5, tri1.getSide2());
     assertEquals(15.0, tri1.getPerimeter(), 0.0001);
     assertEquals(12.0, geo.getPerimeter(), 0.0001);
     assertEquals(10.825317547305483, tri1.getArea(), 0.00000001);
     assertEquals(6.0, geo.getArea(), 0.00000001);
     assertEquals(geo.toString(), "Triangle: side1 = 3.0 side2 = 5.0 side3 = 4.0");
     assertEquals("blue", geo.getColor());
      RegularPolygon pol1 = new RegularPolygon(6, 4);
      RegularPolygon pol2 = new RegularPolygon(10, 4, 5.6, 7.8);
      GeometricObject obj2 = new Rectangle();
      GeometricObject obj3 = new Circle();      
      geo = pol2;
      BucketOfObjects bucket = new BucketOfObjects();
      bucket.addObject((GeometricObject) tri1);
      bucket.addObject((GeometricObject) pol1);
      bucket.addObject(obj2);
      bucket.addObject(geo);
      bucket.addObject(new Circle());      
      bucket.addObject((GeometricObject) tri2);
      bucket.addObject((GeometricObject) pol2);
      assertEquals("white", pol2.getColor());
      geo.setColor("red");
      assertEquals(0.0, pol1.getX());
      assertEquals(7.8, pol2.getY());
      assertEquals(6, pol1.getN());
      assertEquals("Triangle, RegularPolygon, Rectangle, RegularPolygon, Circle, Triangle, RegularPolygon", bucket.toString());
      assertEquals(4, pol2.getSide());
      assertEquals(24.0, pol1.getPerimeter(), 0.0001);
      assertEquals(40.0, pol2.getPerimeter(), 0.0001);
      assertEquals(41.569219381653056, pol1.getArea(), 0.00000001);
      assertEquals(123.10734148701015, geo.getArea(), 0.00000001);
      assertEquals(304.60921990297885, bucket.getTotalArea(), 0.0000001);
      assertEquals(131.0, bucket.getTotalPerimeter(), 0.0000000001);
      assertEquals(pol2.toString(), "RegularPolygon: number of sides = 10 side length = 4.0");
      assertEquals("red", pol2.getColor());
      System.setOut(originalOut);
   }   
}
